server:
  port: ${APP_PORT:8080}

spring:
  application:
    name: "${APP_NAME:MicroserviceAws}"
  r2dbc:
    url: r2dbc:h2:mem:///testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password:

management:
  health:
    probes:
      enabled: true
  endpoint:
    health:
      show-details: ${SHOW_DETAILS:never}
      enabled: true
      cache:
        time-to-live: "10s"
  endpoints:
    web:
      base-path: "${PATH_BASE:/api/v1/microservice-aws/}"
      path-mapping:
        health: "health"
        liveness: "liveness"
        readiness: "readiness"
      exposure:
        include: "health, liveness, readiness, metrics"

logging:
  level:
    root: ${LOG4J_LEVEL:INFO}

entries:
  web:
    path-base: "${PATH_BASE:/api/v1/microservice-aws}"
    path-countries: "${PATH_COUNTRY:/country}"
    listAll: "/list-all"
    findByShortCode: "/findByShortCode/{shortCode}"
    save: "/save"
    update: "/update"
    delete: "/delete/{id}"
  regex-body-wr:
    name: "${REGEX_COUNTRY_NAME:^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]{3,50}$}"
    codeShort: "${REGEX_COUNTRY_CODE_SHORT:^[a-zA-Z]{3,4}$}"
  properties:
    expression-timer: "${EXPRESSION_TIMER:0 */15 * * * ?}"
    process-on-schedule: "${PROCESS_ON_SCHEDULE:Y}"

adapters:
  secrets-manager:
    region: "${AWS_REGION:us-east-1}"
    endpoint: ${PARAM_URL:http://localhost:4566}
    namePostgresql: "${SECRET_NAME_POSTGRE:local-postgresql}"
    nameMysql: "${SECRET_NAME_MYSQL:local-mysql}"
    nameRedis: "${SECRET_NAME_REDIS:local-redis}"
    nameRabbitMq: "${SECRET_NAME_RABBIT_MQ:local-rabbitmq}"
  redis:
    expireTime: ${CACHE_EXPIRE_SECONDS:10}
  rest-country:
    timeout: ${TIMEOUT:5000}
    url: ${URL_COUNTRIES:http://localhost:3000/api/v3/microservice-countries}
    info:
      exist: "${COUNTRY_EXIST:/country/exist/}"
    retry:
      retries: ${REST_COUNTRY_RETRIES:3}
      retryDelay: ${REST_COUNTRY_RETRY_DELAY:2}
  s3:
    region: "${AWS_REGION:us-east-1}"
    endpoint: http://localhost:4566
    accessKey: "test"
    secretKey: "test"
  dynamodb:
    endpoint: "http://localhost:4566"
  repositories:
    tables:
      namesmap:
        world_region: local_worldregions

listen:
  event:
    names:
      saveCountry: "${EVENT_NAME_SAVE_COUNTRY:business.myapp.save.country}"
      saveCacheCountCountry: "${EVENT_NAME_COUNT_IN_CACHE_COUNTRY:business.myapp.save-cache-count.country}"
      saveWorldRegion: "${EVENT_NAME_SAVE_ALL_WORLD_REGION:business.myapp.save-all.world-region}"