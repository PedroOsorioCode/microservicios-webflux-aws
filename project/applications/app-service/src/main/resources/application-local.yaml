server:
  port: ${APP_PORT:8080}

spring:
  application:
    name: "${APP_NAME:MicroserviceAws}"

management:
  health:
    probes:
      enabled: true
  endpoint:
    health:
      show-details: ${SHOW_DETAILS:never}
      enabled: true
      cache:
        time-to-live: "10s"
  endpoints:
    web:
      base-path: "${PATH_BASE:/api/v1/microservice-aws/}"
      path-mapping:
        health: "health"
        liveness: "liveness"
        readiness: "readiness"
      exposure:
        include: "health, liveness, readiness, metrics"

logging:
  level:
    root: ${LOG4J_LEVEL:INFO}

springdoc:
  version: "1.0.0"
  api-docs:
    path: "${PATH_BASE:/api/v1/microservice-aws}/api-docs"
  swagger-ui:
    disable-swagger-default-url: true
    path: "${PATH_BASE:/api/v1/microservice-aws}/swagger.html"

entries:
  reactive-web:
    path-base: "${PATH_BASE:/api/v1/microservice-aws}"
    greet: "/greet"
    greetReactive: "/greetReactive"
    greetReactiveQueryParam: "/greetReactiveQueryParam"
    greetReactivePathVariable: "/greetReactivePathVariable/{place}"
  world-region-web:
    path-base: "${PATH_BASE:/api/v2/microservice-aws}"
    listByRegion: "/list-by-region"
    findOne: "/find-one"
    saveRegion: "/save-region"
    updateRegion: "/update-region"
    deleteRegion: "/delete-region"
  regex-body-wr:
    region: "${REGEX_WR_REGION:^[a-zA-Z]{4,15}-[a-zA-Z]{2,5}$}"
    name: "${REGEX_WR_NAME:^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]{1,50}$}"
    code-region: "${REGEX_WR_CODE_REGION:^[a-zA-Z]{4,15}-[a-zA-Z]{2,5}$}"

integration:
  secrets:
    rabbitmq: ${SECRET_NAME_RABBITMQ:local-rabbitmq}
    redis: ${SECRET_NAME_REDIS:local-redis}
  aws:
    secrets-manager:
      region: ${AWS_REGION:us-east-1}
      endpoint: http://localhost:4566
      cacheSeconds: ${AWS_CACHE_SECONDS:3600}
      cacheSize: ${AWS_CACHE_SIZE:200}

adapters:
  dynamodb:
    endpoint: "http://localhost:4566"
  repositories:
    tables:
      namesmap:
        world_region: local_worldregions
  rest-audit:
    timeout: ${TIMEOUT:5000}
    url: ${PARAM_URL:http://localhost:8089/api/v3/microservice-param}
    parameter:
      name: "${PARAM_NAME:/auditOnSave}"
    retry:
      retries: ${REST_AUDIT_RETRIES:3}
      retryDelay: ${REST_AUDIT_RETRY_DELAY:2}
  s3:
    endpoint: "${S3_ENDPOINT:http://localhost:4566}"
    bucket: "${S3_BUCKET_NAME:exampleaws}"
    region: "${REGION_AWS:us-east-1}"

registration:
  event:
    consume:
      createCountry: "${event_create_region:microservice.common.createRegion}"
    publish:
      updateCountry: "${event_audit_update_region:microservice.audit.updateRegion"
      deleteCountry: "${event_audit_delete_region:microservice.audit.deleteRegion"

aws:
  secrets-manager:
    region: ${AWS_REGION:us-east-1}
  secrets:
    rabbitmq: "${SECRET_NAME_RABBITMQ}"
    redis: "${SECRET_NAME_REDIS}"
  redis:
    cache:
      expireTime: 3600

audit:
  world-region:
    audit-on-list: ${APPLY_AUDIT_LIST_WR:true}